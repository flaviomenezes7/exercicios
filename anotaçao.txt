------------------------- ANOTAÇÕES -------------------------

return -> Responsável por devolver o valor.

- Exemplo:

##### COM RETURN #####

def numeros_pares(lista):
    return [i for i in lista if i % 2 == 0]

print(numeros_pares([1, 2, 3, 4, 5, 6]))  # Saída: [2, 4, 6]


##### SEM RETURN #####

def numeros_pares(lista):
    [i for i in lista if i % 2 == 0]  # Isso gera a lista, mas não faz nada com ela

print(numeros_pares([1, 2, 3, 4, 5, 6]))  # Saída: None

<><><><><><><><><><><><><><><><><>#<><><><><><><><><><><><><><><><><><><>

- Explicando o looping:

[expressão for variável in iterável if condição] = [i for i in lista if i % 2 == 0]

-> i expressão (número que será adicionado a lista. no caso dessa questão são os números pares que quero.)
-> for i in lista (iterando sobre a lista, passando por ela)
-> if i % 2 == 0 (condição para ver se o número é par ou não.)


---------------------------------------------------------------------------


# Diferença Selenium x BeautifulSoap

- Propósito: Selenium é uma ferramenta de automação de navegadores. Ele é usado para interagir com páginas da web de forma programática,
simulando ações de um usuário real, como clicar em botões, preencher formulários e navegar entre páginas.

- Propósito: BeautifulSoup é uma biblioteca de parsing HTML e XML. Ele é usado para analisar e extrair dados de páginas
estáticas ou de HTML já carregado.


# Quando usar cada um?

Use Selenium:

Quando a página carrega conteúdo dinamicamente via JavaScript.
Quando você precisa interagir com a página (ex.: clicar em botões, rolar a página).
Para simular o comportamento de um usuário real.

Use BeautifulSoup:
Quando a página é estática ou o HTML completo pode ser obtido diretamente.
Quando você precisa de uma solução mais rápida e leve para extração de dados.
Quando não há necessidade de interagir com a página.


---------------------------------------------------------------------------
